// <auto-generated />
using System;
using DailyTracker.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyTracker.API.Migrations
{
    [DbContext(typeof(DailyTrackerDbContext))]
    partial class DailyTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DailyTracker.API.Models.Domain.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87420699-f622-4a17-858f-c6363de440c1"),
                            Name = "Sport"
                        },
                        new
                        {
                            Id = new Guid("260f704d-8bd5-45ed-bf6a-9fa9f6607d92"),
                            Name = "No alcohol"
                        },
                        new
                        {
                            Id = new Guid("1693788f-ca13-4ed0-8b5b-074389d2a4cd"),
                            Name = "No sugar"
                        });
                });

            modelBuilder.Entity("DailyTracker.API.Models.Domain.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a48e6f70-a9e0-44ca-9c8e-9ef8a70ef8d8"),
                            Name = "Tess"
                        },
                        new
                        {
                            Id = new Guid("2562d8f5-e514-4af4-b803-0a29fbbb9400"),
                            Name = "Cris"
                        });
                });

            modelBuilder.Entity("DailyTracker.API.Models.Domain.Tracker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Week")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Tracker");
                });

            modelBuilder.Entity("DailyTracker.API.Models.Domain.Tracker", b =>
                {
                    b.HasOne("DailyTracker.API.Models.Domain.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyTracker.API.Models.Domain.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Participant");
                });
#pragma warning restore 612, 618
        }
    }
}
